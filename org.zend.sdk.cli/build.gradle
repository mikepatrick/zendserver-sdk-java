apply plugin: 'java'
apply plugin: 'eclipse'
apply from:"file:emma.gradle"

sourceCompatibility = getBuildProperty('source')
version = getBuildProperty('sdk.version')

sourceFolder = 'sdkcli'
testFolder = 'test'
helpersFolder = 'helpers'
updateFolder = 'update'
sharedFolder = 'shared'

repositories {
	mavenCentral()
	maven { url "http://maven.restlet.org" }
	maven { url "http://download.eclipse.org/jgit/maven" }
	flatDir { name 'localRepository' }
	localRepository { dirs 'lib' }
	localRepository { dirs 'file://' + project.rootDir.path + '/../org.zend.webapi/build/libs/' }
	localRepository { dirs 'file://' + project.rootDir.path + '/../org.zend.sdk/build/libs/' }
	localRepository { dirs 'file:///disk2/hudson/jobs/org.zend.webapi/workspace/org.zend.webapi/build/libs/' }
	localRepository { dirs 'file:///disk2/hudson/jobs/org.zend.sdk/workspace/org.zend.sdk/build/libs/' }
}

sourceSets {
	main {
		java {
			srcDir sourceFolder
			srcDir sharedFolder
			srcDir helpersFolder
		}
		resources {
			srcDir sourceFolder
			srcDir helpersFolder
		}
	}
	test {
		java { 
			srcDir testFolder
			srcDir sharedFolder
			srcDir updateFolder 
		}
		resources { srcDir testFolder }
	}
	update {
		java { 
			srcDir updateFolder
			srcDir sharedFolder
		}
	}
}

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.5'
	testCompile name: 'org.zend.webapi.test'
	compile group: 'com.jcraft', name: 'jsch', version: '0.1.41'
	compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
	compile group: 'log4j', name: 'log4j', version: '1.2.16'
	compile 'org.slf4j:slf4j-api:1.6.1'
	compile 'org.slf4j:slf4j-log4j12:1.6.1'
	compile 'org.slf4j:jul-to-slf4j:1.6.1'
	compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '1.1.0.201109151100-r'
	compile group: 'org.restlet.jse', name: 'org.restlet', version: '2.0.4'
	compile group: 'org.restlet.jse', name: 'org.restlet.ext.xml', version: '2.0.4'
	compile name: 'registry'
	compile name: 'archquery'
	compile name: 'org.zend.webapi'
	compile name: 'org.zend.sdk'
}

eclipse {
	classpath.downloadSources = false
	classpath.file {
		whenMerged {classpath ->
			classpath.entries.unique { a, b -> a.kind.equals(b.kind) && a.path.equals(b.path) ? 0 : 1 }
		}
	}
}

test {
	scanForTestClasses = false
	include '**/*AllCliTests.class'
}

jar {
	archiveName = project.rootProject.name + '.jar'
	exclude 'org/zend/sdkhelp' 
}

task createUpdateJar(type: Jar, dependsOn: compileUpdateJava) {
	archiveName = 'org.zend.sdk.update.jar'
	from sourceSets.update.output.classesDir
}

task createBinPackage(type: Zip) {
	String folderName = 'zend-sdk-cli-' + version
	archiveName = folderName + '-bin.zip'
	into(folderName + '/lib') {
		from project.libsDir
		from configurations.compile
	}
	into(folderName + '/lib') {
		from 'lib'
		exclude '*.jar'
	}
	into(folderName + '/resources') {
		from 'resources'
		include 'schemas/*.xsd'
	}
	into(folderName + '/tools') {
		fileMode=0755
		from 'tools'
	}
	into(folderName) {
		from project.rootDir
		include 'README'
	}
}

task createUpdatePackage(type: Zip) {
	destinationDir = new File(project.buildDir.path + '/tmp')
	archiveName = 'update/' + version + '/package.zip'
	into('lib') {
		from project.libsDir
		from configurations.compile
	}
	into('lib') {
		from 'lib'
		exclude '*.jar'
	}
	into('resources') {
		from 'resources'
		include 'schemas/*.xsd'
	}
	into('tools') {
		fileMode=0755
		from 'tools'
	}
	into('.') {
		from project.rootDir
		include 'README'
	}
}

task createUpdateFiles(dependsOn: createUpdatePackage) {
	doLast {
		File result = new File(project.buildDir, "/tmp/update/" + version + "/delta.xml")
		outputs.file(new File(project.buildDir, "/tmp/update/" + version + "/delta.xml"))
	
		def packageFile = new File(project.buildDir, "/tmp/update/" + version + "/package.zip")
		File deltaFile = new File(project.rootDir.path + "/helpers/org/zend/sdkhelp/update/delta.xml")
		def delta = new XmlParser().parse(deltaFile);
		delta.@size = packageFile.length()
		delta.@file = delta.@file.replaceAll("sdk.version", version)
		File dest = new File(project.buildDir, 'tmp/update/' + version + '/delta.xml')
		dest.getParentFile().mkdirs()
		new XmlNodePrinter(new PrintWriter(new FileWriter(dest))).print(delta)
		def versions = new XmlParser().parse("https://zend-sdk.googlecode.com/svn/trunk/updates/versions.xml")
		if (versions.version.findAll{ it.'@name'.equals(version) }.size() == 0) {
			versionRange = '[,' + version + ')'
			deltaLoc = 'https://zend-sdk.googlecode.com/svn/trunk/updates/' + version
			versions.appendNode('version', [name: version, range: versionRange, delta: deltaLoc])
			dest = new File(project.buildDir, 'tmp/update/versions.xml')
			new XmlNodePrinter(new PrintWriter(new FileWriter(dest))).print(versions)
		}
	}
}

task createUpdate(type: Zip, dependsOn: createUpdateFiles) {
	archiveName = 'update.zip'
	into('updates') {
		from project.buildDir.path + '/tmp/update'
	}
}

createBinPackage.doFirst {
	ant.echo(message: 'sdk.version=' + version, file: project.libsDir.path + File.separator + 'sdk.version')
}

task createSrcPackage(type: Zip) {
	String folderName = 'zend-sdk-cli-' + version
	archiveName = folderName + '.zip'
	into(folderName + '/lib') {
		from project.libsDir
		from configurations.compile
	}
	into(folderName + '/lib') {
		from 'lib'
		exclude '*.jar'
	}
	into(folderName + '/src') { from sourceFolder }
	into(folderName + '/test') { from testFolder }
	into(folderName + '/docs') { from project.docsDir }
	into(folderName + '/resources') {
		from 'resources'
		include 'schemas/*.xsd'
	}
	into(folderName + '/tools') {
		from 'tools'
	}
	into(folderName) {
		from project.rootDir
		include 'README'
	}
}


task generateBasicRepository << {
	tmp = buildDir.path + '/tmp'
	repository = buildDir.path + '/repository'
	quickstartTmp = tmp + '/zf'
	repoTmp = tmp + '/repository'
	delete {
		delete tmp
		delete repository
	}
	execCommand('org.zend.sdkcli.Main', 'create', 'project', '-n', 'helloworld', '-d', quickstartTmp)
	File repositoryDir = new File(repoTmp)
	if (!repositoryDir.exists()) {
		repositoryDir.mkdir()
	}
	execCommand('org.zend.sdkcli.Main', 'create', 'package', '-p', quickstartTmp, '-d', repoTmp)
	execCommand('org.zend.sdkcli.Main', 'generate', 'repository', '-t', 'helpers/org/zend/sdkhelp/repository/quickstart.xml', '-o', repoTmp, '-p', repoTmp + '/helloworld-1.0.0.zpk')
	copy {
		from repoTmp
		into repository
	}
	delete { delete tmp }
}

javadoc.doLast {
	execCommand('org.zend.sdkhelp.docs.GenerateManual', project.docsDir.path + "/syntax.html")
	execCommand('org.zend.sdkhelp.validation.ValidationReport', project.docsDir.path + "/conflicts.html")
}

void execCommand(String mainName, String... argsList) {
	javaexec {
		main = mainName
		classpath = sourceSets.main.runtimeClasspath
		args argsList
	}
}

String getBuildProperty(String name) {
	props = new Properties()
	new File('artifacts.properties').withInputStream { stream ->
		props.load(stream)
	}
	return props[name]
}