apply plugin: 'java'
apply plugin: 'eclipse'
apply from:"file:emma.gradle"

ant.importBuild 'resources/generator/build.xml'

sourceCompatibility = getBuildProperty('source')
version = getBuildProperty('sdk.version')
pluginVersion = "1.0.6" + getQualifier()

sourceFolder = 'sdklib'
testFolder = 'test'

repositories {
	mavenCentral()
	maven { url "http://snapshots.jboss.org/maven2" }
	maven { url "http://maven.restlet.org" }
	flatDir { name 'localRepository' }
	localRepository { dirs 'lib' }
	localRepository { dirs 'file://' + project.rootDir.path + '/../org.zend.webapi/build/libs/' }
	localRepository { dirs 'file:///disk2/hudson/jobs/org.zend.webapi/workspace/org.zend.webapi/build/libs/' }
}

sourceSets {
	main {
		java { srcDir sourceFolder }
		resources { srcDir sourceFolder }
	}
	test {
		java { srcDir testFolder } 
		resources { srcDir testFolder }
	}
}

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.5'
	testCompile name: 'org.zend.webapi.test'
	compile group: 'org.restlet.jse', name: 'org.restlet', version: '2.0.4'
	compile group: 'org.restlet.jse', name: 'org.restlet.ext.xml', version: '2.0.4'
	compile group: 'com.openshift', name: 'openshift-java-client', version: '2.0.1'
	compile name: 'registry'
	compile name: 'org.zend.webapi'
}

eclipse {
	classpath.downloadSources = false
	classpath.file {
		whenMerged {classpath ->
			classpath.entries.unique { a, b -> a.kind.equals(b.kind) && a.path.equals(b.path) ? 0 : 1 }
		}
	}
}

test {
	scanForTestClasses = false
	include '**/*AllLibTests.class'
}

jar {
	archiveName = project.rootProject.name + '.jar'
	manifest {
		from ('META-INF/MANIFEST.MF') {
			eachEntry { attribute ->
				if (attribute.key == 'Bundle-Version') {
					attribute.value = version
				}
			}
		}
	}
}

build.doLast {
	copy {
		from configurations.compile
		into project.libsDir
	}
}

task createDistribution << {
	createBinPackage.execute()
	createSrcPackage.execute()
	createPlugin.execute()
}

task createBinPackage(type: Zip) {
	archiveName = project.rootProject.name + '-' + version + '-bin.zip'
	into('lib') {
		from project.libsDir
		from configurations.compile
	}
	into('lib') {
		from 'lib'
		exclude '*.jar'
	}
	into('resources') {
		from 'resources'
		include 'schemas/*.xsd'
	}
}

task createSrcPackage(type: Zip) {
	into('lib') {
		from project.libsDir
		from configurations.compile
	}
	into('lib') {
		from 'lib'
		exclude '*.jar'
	}
	into('src') { from sourceFolder }
	into('test') { from testFolder }
	into('docs') { from project.docsDir }
	into('resources') {
		from 'resources'
	}
}

task createSourceJar(type: Jar) {
	archiveName = project.rootProject.name + '-sources.jar'
	from sourceSets.main.allSource
	manifest {
		from ('META-INF/MANIFEST.MF') {
			eachEntry { attribute ->
				if (attribute.key == 'Bundle-Version') {
					attribute.value = version
				}
			}
		}
	}
}

task createPlugin(type: Jar) {
	archiveName = project.rootProject.name + '.jar'
	destinationDir = new File(project.distsDir.path + File.separator + 'plugins')
	into('lib') {
		from configurations.compile
		exclude 'org.osgi.core-*'
	}
	into('lib') {
		from 'lib'
		exclude '**/*.jar'
	}
	into('.') {
		from sourceSets.main.output.classesDir
		from sourceSets.main.output.resourcesDir
	}
	into('schemas') {
		from 'resources/schemas'
		include '*.xsd'
	}
	manifest {
		from ('META-INF/MANIFEST.MF') {
			eachEntry { attribute ->
				if (attribute.key == 'Bundle-Version') {
					attribute.value = pluginVersion
				}
				if (attribute.key == 'Bundle-ClassPath') {
					attribute.value = createBundleClasspath()
				}
			}
		}
	}
}

createPlugin.doLast {
	ant.echo(message: 'sdk.version=' + pluginVersion, file: project.distsDir.path + File.separator + 'plugins' + File.separator + 'sdk.version')
}

String getBuildProperty(String name) {
	props = new Properties()
	new File('artifacts.properties').withInputStream { stream ->
		props.load(stream)
	}
	return props[name]
}

String getQualifier() {
	cal = Calendar.instance
	result = "." + cal.get(Calendar.YEAR)
	result += getFormattedValue(cal.get(Calendar.MONTH) + 1)
	result += getFormattedValue(cal.get(Calendar.DATE))
	result += getFormattedValue(cal.get(Calendar.HOUR_OF_DAY))
	result += getFormattedValue(cal.get(Calendar.MINUTE))
	return result
}

String getFormattedValue(int value) {
	if (value < 10) {
		return "0" + value
	} else {
		return String.valueOf(value)
	}
}

String createBundleClasspath() {
	StringBuilder builder = new StringBuilder()
	configurations.compile.collect {
		builder.append('lib/' + it.name + ", ")
	}
	builder.append('.');
	return builder.toString()
}
